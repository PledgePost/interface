// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Allocated extends ethereum.Event {
  get params(): Allocated__Params {
    return new Allocated__Params(this);
  }
}

export class Allocated__Params {
  _event: Allocated;

  constructor(event: Allocated) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get articleId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ArticleDonated extends ethereum.Event {
  get params(): ArticleDonated__Params {
    return new ArticleDonated__Params(this);
  }
}

export class ArticleDonated__Params {
  _event: ArticleDonated;

  constructor(event: ArticleDonated) {
    this._event = event;
  }

  get author(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get articleId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ArticlePosted extends ethereum.Event {
  get params(): ArticlePosted__Params {
    return new ArticlePosted__Params(this);
  }
}

export class ArticlePosted__Params {
  _event: ArticlePosted;

  constructor(event: ArticlePosted) {
    this._event = event;
  }

  get author(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get content(): string {
    return this._event.parameters[1].value.toString();
  }

  get articleId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoundApplied extends ethereum.Event {
  get params(): RoundApplied__Params {
    return new RoundApplied__Params(this);
  }
}

export class RoundApplied__Params {
  _event: RoundApplied;

  constructor(event: RoundApplied) {
    this._event = event;
  }

  get author(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get articleId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoundCreated extends ethereum.Event {
  get params(): RoundCreated__Params {
    return new RoundCreated__Params(this);
  }
}

export class RoundCreated__Params {
  _event: RoundCreated;

  constructor(event: RoundCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ipoolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get roundId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get startDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PledgePost__authorArticlesResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: string, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getAuthor(): Address {
    return this.value1;
  }

  getContent(): string {
    return this.value2;
  }

  getDonationsReceived(): BigInt {
    return this.value3;
  }
}

export class PledgePost__authorToArticleIdToRoundResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: Bytes;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: Bytes,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getDescription(): Bytes {
    return this.value3;
  }

  getPoolAddress(): Address {
    return this.value4;
  }

  getPoolToken(): Address {
    return this.value5;
  }

  getPoolAmount(): BigInt {
    return this.value6;
  }

  getStartDate(): BigInt {
    return this.value7;
  }

  getEndDate(): BigInt {
    return this.value8;
  }

  getCreatedTimestamp(): BigInt {
    return this.value9;
  }

  getIsActive(): boolean {
    return this.value10;
  }
}

export class PledgePost__createRoundResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): Bytes {
    return this[3].toBytes();
  }

  get poolAddress(): Address {
    return this[4].toAddress();
  }

  get poolToken(): Address {
    return this[5].toAddress();
  }

  get poolAmount(): BigInt {
    return this[6].toBigInt();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get isActive(): boolean {
    return this[10].toBoolean();
  }
}

export class PledgePost__getAllAuthorArticleResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get author(): Address {
    return this[1].toAddress();
  }

  get content(): string {
    return this[2].toString();
  }

  get donationsReceived(): BigInt {
    return this[3].toBigInt();
  }
}

export class PledgePost__getAllRoundResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): Bytes {
    return this[3].toBytes();
  }

  get poolAddress(): Address {
    return this[4].toAddress();
  }

  get poolToken(): Address {
    return this[5].toAddress();
  }

  get poolAmount(): BigInt {
    return this[6].toBigInt();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get isActive(): boolean {
    return this[10].toBoolean();
  }
}

export class PledgePost__getAppliedArticleResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get author(): Address {
    return this[1].toAddress();
  }

  get content(): string {
    return this[2].toString();
  }

  get donationsReceived(): BigInt {
    return this[3].toBigInt();
  }
}

export class PledgePost__getAppliedRoundResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): Bytes {
    return this[3].toBytes();
  }

  get poolAddress(): Address {
    return this[4].toAddress();
  }

  get poolToken(): Address {
    return this[5].toAddress();
  }

  get poolAmount(): BigInt {
    return this[6].toBigInt();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get isActive(): boolean {
    return this[10].toBoolean();
  }
}

export class PledgePost__getAuthorArticleResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get author(): Address {
    return this[1].toAddress();
  }

  get content(): string {
    return this[2].toString();
  }

  get donationsReceived(): BigInt {
    return this[3].toBigInt();
  }
}

export class PledgePost__getRoundResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): Bytes {
    return this[3].toBytes();
  }

  get poolAddress(): Address {
    return this[4].toAddress();
  }

  get poolToken(): Address {
    return this[5].toAddress();
  }

  get poolAmount(): BigInt {
    return this[6].toBigInt();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get isActive(): boolean {
    return this[10].toBoolean();
  }
}

export class PledgePost__roundArticlesResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: string, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getAuthor(): Address {
    return this.value1;
  }

  getContent(): string {
    return this.value2;
  }

  getDonationsReceived(): BigInt {
    return this.value3;
  }
}

export class PledgePost__roundsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: Bytes;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: Bytes,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getDescription(): Bytes {
    return this.value3;
  }

  getPoolAddress(): Address {
    return this.value4;
  }

  getPoolToken(): Address {
    return this.value5;
  }

  getPoolAmount(): BigInt {
    return this.value6;
  }

  getStartDate(): BigInt {
    return this.value7;
  }

  getEndDate(): BigInt {
    return this.value8;
  }

  getCreatedTimestamp(): BigInt {
    return this.value9;
  }

  getIsActive(): boolean {
    return this.value10;
  }
}

export class PledgePost extends ethereum.SmartContract {
  static bind(address: Address): PledgePost {
    return new PledgePost("PledgePost", address);
  }

  applicationStatusForRound(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): i32 {
    let result = super.call(
      "applicationStatusForRound",
      "applicationStatusForRound(address,uint256,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toI32();
  }

  try_applicationStatusForRound(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "applicationStatusForRound",
      "applicationStatusForRound(address,uint256,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  articleDonators(param0: Address, param1: BigInt, param2: BigInt): Address {
    let result = super.call(
      "articleDonators",
      "articleDonators(address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_articleDonators(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "articleDonators",
      "articleDonators(address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authorArticles(
    param0: Address,
    param1: BigInt
  ): PledgePost__authorArticlesResult {
    let result = super.call(
      "authorArticles",
      "authorArticles(address,uint256):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new PledgePost__authorArticlesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt()
    );
  }

  try_authorArticles(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<PledgePost__authorArticlesResult> {
    let result = super.tryCall(
      "authorArticles",
      "authorArticles(address,uint256):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PledgePost__authorArticlesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt()
      )
    );
  }

  authorToArticleIdToRound(
    param0: Address,
    param1: BigInt
  ): PledgePost__authorToArticleIdToRoundResult {
    let result = super.call(
      "authorToArticleIdToRound",
      "authorToArticleIdToRound(address,uint256):(uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new PledgePost__authorToArticleIdToRoundResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBytes(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBoolean()
    );
  }

  try_authorToArticleIdToRound(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<PledgePost__authorToArticleIdToRoundResult> {
    let result = super.tryCall(
      "authorToArticleIdToRound",
      "authorToArticleIdToRound(address,uint256):(uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PledgePost__authorToArticleIdToRoundResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBytes(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBoolean()
      )
    );
  }

  authorTotalDonations(param0: Address): BigInt {
    let result = super.call(
      "authorTotalDonations",
      "authorTotalDonations(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_authorTotalDonations(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "authorTotalDonations",
      "authorTotalDonations(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkOwner(_sender: Address, _author: Address, _articleId: BigInt): boolean {
    let result = super.call(
      "checkOwner",
      "checkOwner(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkOwner(
    _sender: Address,
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkOwner",
      "checkOwner(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createRound(
    _token: Address,
    _name: string,
    _description: string,
    _startDate: BigInt,
    _endDate: BigInt
  ): PledgePost__createRoundResultValue0Struct {
    let result = super.call(
      "createRound",
      "createRound(address,string,string,uint256,uint256):((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool))",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_description),
        ethereum.Value.fromUnsignedBigInt(_startDate),
        ethereum.Value.fromUnsignedBigInt(_endDate)
      ]
    );

    return changetype<PledgePost__createRoundResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_createRound(
    _token: Address,
    _name: string,
    _description: string,
    _startDate: BigInt,
    _endDate: BigInt
  ): ethereum.CallResult<PledgePost__createRoundResultValue0Struct> {
    let result = super.tryCall(
      "createRound",
      "createRound(address,string,string,uint256,uint256):((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool))",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_description),
        ethereum.Value.fromUnsignedBigInt(_startDate),
        ethereum.Value.fromUnsignedBigInt(_endDate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PledgePost__createRoundResultValue0Struct>(value[0].toTuple())
    );
  }

  deposit(_roundId: BigInt, _amount: BigInt): boolean {
    let result = super.call("deposit", "deposit(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_roundId),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_deposit(_roundId: BigInt, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("deposit", "deposit(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_roundId),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllAuthorArticle(
    _author: Address
  ): Array<PledgePost__getAllAuthorArticleResultValue0Struct> {
    let result = super.call(
      "getAllAuthorArticle",
      "getAllAuthorArticle(address):((uint256,address,string,uint256)[])",
      [ethereum.Value.fromAddress(_author)]
    );

    return result[0].toTupleArray<
      PledgePost__getAllAuthorArticleResultValue0Struct
    >();
  }

  try_getAllAuthorArticle(
    _author: Address
  ): ethereum.CallResult<
    Array<PledgePost__getAllAuthorArticleResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllAuthorArticle",
      "getAllAuthorArticle(address):((uint256,address,string,uint256)[])",
      [ethereum.Value.fromAddress(_author)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PledgePost__getAllAuthorArticleResultValue0Struct>()
    );
  }

  getAllRound(): Array<PledgePost__getAllRoundResultValue0Struct> {
    let result = super.call(
      "getAllRound",
      "getAllRound():((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<PledgePost__getAllRoundResultValue0Struct>();
  }

  try_getAllRound(): ethereum.CallResult<
    Array<PledgePost__getAllRoundResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllRound",
      "getAllRound():((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PledgePost__getAllRoundResultValue0Struct>()
    );
  }

  getAllocation(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt
  ): BigInt {
    let result = super.call(
      "getAllocation",
      "getAllocation(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAllocation(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllocation",
      "getAllocation(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApplicationStatus(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt
  ): i32 {
    let result = super.call(
      "getApplicationStatus",
      "getApplicationStatus(uint256,address,uint256):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return result[0].toI32();
  }

  try_getApplicationStatus(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getApplicationStatus",
      "getApplicationStatus(uint256,address,uint256):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAppliedArticle(
    _roundId: BigInt,
    _index: BigInt
  ): PledgePost__getAppliedArticleResultValue0Struct {
    let result = super.call(
      "getAppliedArticle",
      "getAppliedArticle(uint256,uint256):((uint256,address,string,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return changetype<PledgePost__getAppliedArticleResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAppliedArticle(
    _roundId: BigInt,
    _index: BigInt
  ): ethereum.CallResult<PledgePost__getAppliedArticleResultValue0Struct> {
    let result = super.tryCall(
      "getAppliedArticle",
      "getAppliedArticle(uint256,uint256):((uint256,address,string,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PledgePost__getAppliedArticleResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getAppliedRound(
    _author: Address,
    _articleId: BigInt
  ): PledgePost__getAppliedRoundResultValue0Struct {
    let result = super.call(
      "getAppliedRound",
      "getAppliedRound(address,uint256):((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool))",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return changetype<PledgePost__getAppliedRoundResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAppliedRound(
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<PledgePost__getAppliedRoundResultValue0Struct> {
    let result = super.tryCall(
      "getAppliedRound",
      "getAppliedRound(address,uint256):((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool))",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PledgePost__getAppliedRoundResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getAuthorArticle(
    _author: Address,
    _articleId: BigInt
  ): PledgePost__getAuthorArticleResultValue0Struct {
    let result = super.call(
      "getAuthorArticle",
      "getAuthorArticle(address,uint256):((uint256,address,string,uint256))",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return changetype<PledgePost__getAuthorArticleResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAuthorArticle(
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<PledgePost__getAuthorArticleResultValue0Struct> {
    let result = super.tryCall(
      "getAuthorArticle",
      "getAuthorArticle(address,uint256):((uint256,address,string,uint256))",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PledgePost__getAuthorArticleResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getDonatedAmount(_author: Address, _articleId: BigInt): BigInt {
    let result = super.call(
      "getDonatedAmount",
      "getDonatedAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDonatedAmount(
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonatedAmount",
      "getDonatedAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEstimatedAmount(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt,
    _amount: BigInt
  ): BigInt {
    let result = super.call(
      "getEstimatedAmount",
      "getEstimatedAmount(uint256,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getEstimatedAmount(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEstimatedAmount",
      "getEstimatedAmount(uint256,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMatchingAmount(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt
  ): BigInt {
    let result = super.call(
      "getMatchingAmount",
      "getMatchingAmount(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMatchingAmount(
    _roundId: BigInt,
    _author: Address,
    _articleId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMatchingAmount",
      "getMatchingAmount(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecievedDonationsWithinRound(
    _author: Address,
    _articleId: BigInt,
    _roundId: BigInt
  ): BigInt {
    let result = super.call(
      "getRecievedDonationsWithinRound",
      "getRecievedDonationsWithinRound(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRecievedDonationsWithinRound(
    _author: Address,
    _articleId: BigInt,
    _roundId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRecievedDonationsWithinRound",
      "getRecievedDonationsWithinRound(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_author),
        ethereum.Value.fromUnsignedBigInt(_articleId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRound(_roundId: BigInt): PledgePost__getRoundResultValue0Struct {
    let result = super.call(
      "getRound",
      "getRound(uint256):((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );

    return changetype<PledgePost__getRoundResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getRound(
    _roundId: BigInt
  ): ethereum.CallResult<PledgePost__getRoundResultValue0Struct> {
    let result = super.tryCall(
      "getRound",
      "getRound(uint256):((uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PledgePost__getRoundResultValue0Struct>(value[0].toTuple())
    );
  }

  getRoundLength(): BigInt {
    let result = super.call("getRoundLength", "getRoundLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRoundLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoundLength",
      "getRoundLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSquareRoot(x: BigInt): BigInt {
    let result = super.call(
      "getSquareRoot",
      "getSquareRoot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(x)]
    );

    return result[0].toBigInt();
  }

  try_getSquareRoot(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSquareRoot",
      "getSquareRoot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(x)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalSquareSqrtSum(_roundId: BigInt): BigInt {
    let result = super.call(
      "getTotalSquareSqrtSum",
      "getTotalSquareSqrtSum(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalSquareSqrtSum(_roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSquareSqrtSum",
      "getTotalSquareSqrtSum(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  matchingAmounts(param0: BigInt, param1: Address, param2: BigInt): BigInt {
    let result = super.call(
      "matchingAmounts",
      "matchingAmounts(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_matchingAmounts(
    param0: BigInt,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "matchingAmounts",
      "matchingAmounts(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nft(): Address {
    let result = super.call("nft", "nft():(address)", []);

    return result[0].toAddress();
  }

  try_nft(): ethereum.CallResult<Address> {
    let result = super.tryCall("nft", "nft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  postArticle(_content: string): BigInt {
    let result = super.call("postArticle", "postArticle(string):(uint256)", [
      ethereum.Value.fromString(_content)
    ]);

    return result[0].toBigInt();
  }

  try_postArticle(_content: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("postArticle", "postArticle(string):(uint256)", [
      ethereum.Value.fromString(_content)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recievedDonationsWithinRound(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): BigInt {
    let result = super.call(
      "recievedDonationsWithinRound",
      "recievedDonationsWithinRound(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_recievedDonationsWithinRound(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recievedDonationsWithinRound",
      "recievedDonationsWithinRound(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundArticles(
    param0: BigInt,
    param1: BigInt
  ): PledgePost__roundArticlesResult {
    let result = super.call(
      "roundArticles",
      "roundArticles(uint256,uint256):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new PledgePost__roundArticlesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt()
    );
  }

  try_roundArticles(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<PledgePost__roundArticlesResult> {
    let result = super.tryCall(
      "roundArticles",
      "roundArticles(uint256,uint256):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PledgePost__roundArticlesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt()
      )
    );
  }

  rounds(param0: BigInt): PledgePost__roundsResult {
    let result = super.call(
      "rounds",
      "rounds(uint256):(uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PledgePost__roundsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBytes(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBoolean()
    );
  }

  try_rounds(param0: BigInt): ethereum.CallResult<PledgePost__roundsResult> {
    let result = super.tryCall(
      "rounds",
      "rounds(uint256):(uint256,address,string,bytes,address,address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PledgePost__roundsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBytes(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateCall extends ethereum.Call {
  get inputs(): AllocateCall__Inputs {
    return new AllocateCall__Inputs(this);
  }

  get outputs(): AllocateCall__Outputs {
    return new AllocateCall__Outputs(this);
  }
}

export class AllocateCall__Inputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AllocateCall__Outputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }
}

export class AcceptApplicationCall extends ethereum.Call {
  get inputs(): AcceptApplicationCall__Inputs {
    return new AcceptApplicationCall__Inputs(this);
  }

  get outputs(): AcceptApplicationCall__Outputs {
    return new AcceptApplicationCall__Outputs(this);
  }
}

export class AcceptApplicationCall__Inputs {
  _call: AcceptApplicationCall;

  constructor(call: AcceptApplicationCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _author(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _articleId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AcceptApplicationCall__Outputs {
  _call: AcceptApplicationCall;

  constructor(call: AcceptApplicationCall) {
    this._call = call;
  }
}

export class ActivateRoundCall extends ethereum.Call {
  get inputs(): ActivateRoundCall__Inputs {
    return new ActivateRoundCall__Inputs(this);
  }

  get outputs(): ActivateRoundCall__Outputs {
    return new ActivateRoundCall__Outputs(this);
  }
}

export class ActivateRoundCall__Inputs {
  _call: ActivateRoundCall;

  constructor(call: ActivateRoundCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActivateRoundCall__Outputs {
  _call: ActivateRoundCall;

  constructor(call: ActivateRoundCall) {
    this._call = call;
  }
}

export class ApplyForRoundCall extends ethereum.Call {
  get inputs(): ApplyForRoundCall__Inputs {
    return new ApplyForRoundCall__Inputs(this);
  }

  get outputs(): ApplyForRoundCall__Outputs {
    return new ApplyForRoundCall__Outputs(this);
  }
}

export class ApplyForRoundCall__Inputs {
  _call: ApplyForRoundCall;

  constructor(call: ApplyForRoundCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _articleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApplyForRoundCall__Outputs {
  _call: ApplyForRoundCall;

  constructor(call: ApplyForRoundCall) {
    this._call = call;
  }
}

export class CreateRoundCall extends ethereum.Call {
  get inputs(): CreateRoundCall__Inputs {
    return new CreateRoundCall__Inputs(this);
  }

  get outputs(): CreateRoundCall__Outputs {
    return new CreateRoundCall__Outputs(this);
  }
}

export class CreateRoundCall__Inputs {
  _call: CreateRoundCall;

  constructor(call: CreateRoundCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _startDate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _endDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateRoundCall__Outputs {
  _call: CreateRoundCall;

  constructor(call: CreateRoundCall) {
    this._call = call;
  }

  get value0(): CreateRoundCallValue0Struct {
    return changetype<CreateRoundCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class CreateRoundCallValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): Bytes {
    return this[3].toBytes();
  }

  get poolAddress(): Address {
    return this[4].toAddress();
  }

  get poolToken(): Address {
    return this[5].toAddress();
  }

  get poolAmount(): BigInt {
    return this[6].toBigInt();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get isActive(): boolean {
    return this[10].toBoolean();
  }
}

export class DeactivateRoundCall extends ethereum.Call {
  get inputs(): DeactivateRoundCall__Inputs {
    return new DeactivateRoundCall__Inputs(this);
  }

  get outputs(): DeactivateRoundCall__Outputs {
    return new DeactivateRoundCall__Outputs(this);
  }
}

export class DeactivateRoundCall__Inputs {
  _call: DeactivateRoundCall;

  constructor(call: DeactivateRoundCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeactivateRoundCall__Outputs {
  _call: DeactivateRoundCall;

  constructor(call: DeactivateRoundCall) {
    this._call = call;
  }
}

export class DenyApplicationCall extends ethereum.Call {
  get inputs(): DenyApplicationCall__Inputs {
    return new DenyApplicationCall__Inputs(this);
  }

  get outputs(): DenyApplicationCall__Outputs {
    return new DenyApplicationCall__Outputs(this);
  }
}

export class DenyApplicationCall__Inputs {
  _call: DenyApplicationCall;

  constructor(call: DenyApplicationCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _author(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _articleId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DenyApplicationCall__Outputs {
  _call: DenyApplicationCall;

  constructor(call: DenyApplicationCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DonateToArticleCall extends ethereum.Call {
  get inputs(): DonateToArticleCall__Inputs {
    return new DonateToArticleCall__Inputs(this);
  }

  get outputs(): DonateToArticleCall__Outputs {
    return new DonateToArticleCall__Outputs(this);
  }
}

export class DonateToArticleCall__Inputs {
  _call: DonateToArticleCall;

  constructor(call: DonateToArticleCall) {
    this._call = call;
  }

  get _author(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _articleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DonateToArticleCall__Outputs {
  _call: DonateToArticleCall;

  constructor(call: DonateToArticleCall) {
    this._call = call;
  }
}

export class PostArticleCall extends ethereum.Call {
  get inputs(): PostArticleCall__Inputs {
    return new PostArticleCall__Inputs(this);
  }

  get outputs(): PostArticleCall__Outputs {
    return new PostArticleCall__Outputs(this);
  }
}

export class PostArticleCall__Inputs {
  _call: PostArticleCall;

  constructor(call: PostArticleCall) {
    this._call = call;
  }

  get _content(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class PostArticleCall__Outputs {
  _call: PostArticleCall;

  constructor(call: PostArticleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
